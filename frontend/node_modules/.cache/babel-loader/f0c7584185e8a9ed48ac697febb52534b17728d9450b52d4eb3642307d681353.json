{"ast":null,"code":"var _jsxFileName = \"D:\\\\Experiments\\\\WebD\\\\Portfolio-Tracker\\\\frontend\\\\src\\\\context\\\\StocksProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StocksContext = /*#__PURE__*/createContext();\nexport const useStocks = () => {\n  _s();\n  return useContext(StocksContext);\n};\n_s(useStocks, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst StocksProvider = ({\n  children\n}) => {\n  _s2();\n  const [stocks, setStocks] = useState([]);\n\n  // fetching the stocks from database via backend\n  const fetchStocks = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/api/stocks\");\n      setStocks(response.data);\n    } catch (error) {\n      console.error(\"Error fetching stocks:\", error.message);\n    }\n  };\n\n  // fetching the stock price from api\n  const fetchStockPrice = async symbol => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/stock-price/${symbol}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching price for ${symbol}:`, error.message);\n      return null;\n    }\n  };\n  const updateStockPrices = async updatedStocks => {\n    const updatedStockData = await Promise.all(updatedStocks.map(async stock => {\n      const stockPriceData = await fetchStockPrice(stock.symbol);\n      const currentPrice = stockPriceData ? stockPriceData.currentPrice : stock.currentPrice;\n      const profitLoss = stockPriceData ? ((currentPrice - stock.buyPrice) * stock.qty).toFixed(2) : stock.profitLoss;\n      return {\n        ...stock,\n        currentPrice,\n        profitLoss\n      };\n    }));\n    setStocks(updatedStockData);\n  };\n  useEffect(() => {\n    updateStockPrices(stocks);\n  }, []);\n  const addStock = async newStock => {\n    const updatedStocks = [...stocks, newStock];\n    await updateStockPrices(updatedStocks);\n  };\n  const deleteStock = async symbol => {\n    const updatedStocks = stocks.filter(stock => stock.symbol !== symbol);\n    await updateStockPrices(updatedStocks);\n  };\n  const editStock = async updatedStock => {\n    const updatedStocks = stocks.map(stock => stock.symbol === updatedStock.symbol ? updatedStock : stock);\n    await updateStockPrices(updatedStocks);\n  };\n  return /*#__PURE__*/_jsxDEV(StocksContext.Provider, {\n    value: {\n      stocks,\n      addStock,\n      deleteStock,\n      editStock\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n_s2(StocksProvider, \"ckkB5iKANHozGm/BUdCimNAdz7k=\");\n_c = StocksProvider;\nexport default StocksProvider;\n\n// i have to upload the data in server\n// retrieve the data from database and then display\nvar _c;\n$RefreshReg$(_c, \"StocksProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","axios","jsxDEV","_jsxDEV","StocksContext","useStocks","_s","StocksProvider","children","_s2","stocks","setStocks","fetchStocks","response","get","data","error","console","message","fetchStockPrice","symbol","updateStockPrices","updatedStocks","updatedStockData","Promise","all","map","stock","stockPriceData","currentPrice","profitLoss","buyPrice","qty","toFixed","addStock","newStock","deleteStock","filter","editStock","updatedStock","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Experiments/WebD/Portfolio-Tracker/frontend/src/context/StocksProvider.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst StocksContext = createContext();\r\n\r\nexport const useStocks = () => {\r\n    return useContext(StocksContext);\r\n};\r\n\r\nconst StocksProvider = ({ children }) => {\r\n    const [stocks, setStocks] = useState([]);\r\n\r\n    // fetching the stocks from database via backend\r\n    const fetchStocks = async () => {\r\n        try {\r\n            const response = await axios.get(\"http://localhost:5000/api/stocks\");\r\n            setStocks(response.data);\r\n        } catch (error) {\r\n            console.error(\"Error fetching stocks:\", error.message);      \r\n        }\r\n    };\r\n\r\n    // fetching the stock price from api\r\n    const fetchStockPrice = async (symbol) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/api/stock-price/${symbol}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(`Error fetching price for ${symbol}:`, error.message);\r\n            return null;\r\n        }\r\n    };\r\n\r\n    \r\n    const updateStockPrices = async (updatedStocks) => {\r\n        const updatedStockData = await Promise.all(\r\n            updatedStocks.map(async (stock) => {\r\n                const stockPriceData = await fetchStockPrice(stock.symbol);\r\n                const currentPrice = stockPriceData ? stockPriceData.currentPrice : stock.currentPrice;\r\n                const profitLoss = stockPriceData\r\n                    ? ((currentPrice - stock.buyPrice) * stock.qty).toFixed(2)\r\n                    : stock.profitLoss;\r\n                return {\r\n                    ...stock,\r\n                    currentPrice,\r\n                    profitLoss,\r\n                };\r\n            })\r\n        );\r\n        setStocks(updatedStockData);\r\n    };\r\n\r\n    useEffect(() => {\r\n        updateStockPrices(stocks);\r\n    }, []);\r\n    \r\n\r\n    const addStock = async (newStock) => {\r\n        const updatedStocks = [...stocks, newStock];\r\n        await updateStockPrices(updatedStocks);\r\n    };\r\n\r\n    const deleteStock = async (symbol) => {\r\n        const updatedStocks = stocks.filter((stock) => stock.symbol !== symbol);\r\n        await updateStockPrices(updatedStocks);\r\n    };\r\n\r\n    const editStock = async (updatedStock) => {\r\n        const updatedStocks = stocks.map((stock) =>\r\n            stock.symbol === updatedStock.symbol ? updatedStock : stock\r\n        );\r\n        await updateStockPrices(updatedStocks);\r\n    };\r\n\r\n    return (\r\n        <StocksContext.Provider value={{stocks, addStock, deleteStock, editStock}}>\r\n            {children}\r\n        </StocksContext.Provider>\r\n\r\n    );\r\n}\r\n\r\nexport default StocksProvider;\r\n\r\n\r\n// i have to upload the data in server\r\n// retrieve the data from database and then display\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}