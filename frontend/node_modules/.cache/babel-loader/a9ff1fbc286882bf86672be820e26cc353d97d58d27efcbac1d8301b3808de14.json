{"ast":null,"code":"var _jsxFileName = \"D:\\\\Experiments\\\\WebD\\\\Portfolio-Tracker\\\\frontend\\\\src\\\\context\\\\StocksProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StocksContext = /*#__PURE__*/createContext();\nexport const useStocks = () => {\n  _s();\n  return useContext(StocksContext);\n};\n_s(useStocks, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst StocksProvider = ({\n  children\n}) => {\n  _s2();\n  const [stocks, setStocks] = useState([{\n    symbol: 'TSLA',\n    name: 'Tesla Inc',\n    qty: 10,\n    buyPrice: 100,\n    profitLoss: 1000,\n    currentPrice: null\n  }, {\n    symbol: 'AAPL',\n    name: 'Apple Inc',\n    qty: 15,\n    buyPrice: 100,\n    profitLoss: 1200,\n    currentPrice: null\n  }]);\n\n  // Function to fetch the stock price for a given symbol\n  const fetchStockPrice = async symbol => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/stock-price/${symbol}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching price for ${symbol}:`, error.message);\n      return null;\n    }\n  };\n\n  // Function to update stock prices for all stocks\n  const updateStockPrices = async updatedStocks => {\n    const updatedStockData = await Promise.all(updatedStocks.map(async stock => {\n      const stockPriceData = await fetchStockPrice(stock.symbol);\n      return {\n        ...stock,\n        currentPrice: stockPriceData ? stockPriceData.currentPrice : stock.currentPrice\n      };\n    }));\n    setStocks(updatedStockData);\n  };\n\n  // Fetch stock prices when stocks are first loaded\n  useEffect(() => {\n    updateStockPrices(stocks);\n  }, []);\n\n  // Add a new stock and fetch its price\n  const addStock = async newStock => {\n    const updatedStocks = [...stocks, newStock];\n    await updateStockPrices(updatedStocks);\n  };\n\n  // Delete a stock\n  const deleteStock = async symbol => {\n    const updatedStocks = stocks.filter(stock => stock.symbol !== symbol);\n    await updateStockPrices(updatedStocks);\n  };\n\n  // Edit an existing stock and update its price\n  const editStock = async updatedStock => {\n    const updatedStocks = stocks.map(stock => stock.symbol === updatedStock.symbol ? updatedStock : stock);\n    await updateStockPrices(updatedStocks);\n  };\n  return /*#__PURE__*/_jsxDEV(StocksContext.Provider, {\n    value: {\n      stocks,\n      addStock,\n      deleteStock,\n      editStock\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n_s2(StocksProvider, \"AS+RnK3/3FCu0p6BrbdSU4PlAao=\");\n_c = StocksProvider;\nexport default StocksProvider;\nvar _c;\n$RefreshReg$(_c, \"StocksProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","axios","jsxDEV","_jsxDEV","StocksContext","useStocks","_s","StocksProvider","children","_s2","stocks","setStocks","symbol","name","qty","buyPrice","profitLoss","currentPrice","fetchStockPrice","response","get","data","error","console","message","updateStockPrices","updatedStocks","updatedStockData","Promise","all","map","stock","stockPriceData","addStock","newStock","deleteStock","filter","editStock","updatedStock","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Experiments/WebD/Portfolio-Tracker/frontend/src/context/StocksProvider.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst StocksContext = createContext();\r\n\r\nexport const useStocks = () => {\r\n    return useContext(StocksContext);\r\n};\r\n\r\nconst StocksProvider = ({ children }) => {\r\n    const [stocks, setStocks] = useState([\r\n        {\r\n            symbol: 'TSLA',\r\n            name: 'Tesla Inc',\r\n            qty: 10,\r\n            buyPrice: 100,\r\n            profitLoss: 1000,\r\n            currentPrice: null,\r\n        },\r\n        {\r\n            symbol: 'AAPL',\r\n            name: 'Apple Inc',\r\n            qty: 15,\r\n            buyPrice: 100,\r\n            profitLoss: 1200,\r\n            currentPrice: null,\r\n        },\r\n    ]);\r\n\r\n    // Function to fetch the stock price for a given symbol\r\n    const fetchStockPrice = async (symbol) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/api/stock-price/${symbol}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(`Error fetching price for ${symbol}:`, error.message);\r\n            return null;\r\n        }\r\n    };\r\n\r\n    // Function to update stock prices for all stocks\r\n    const updateStockPrices = async (updatedStocks) => {\r\n        const updatedStockData = await Promise.all(\r\n            updatedStocks.map(async (stock) => {\r\n                const stockPriceData = await fetchStockPrice(stock.symbol);\r\n                return {\r\n                    ...stock,\r\n                    currentPrice: stockPriceData ? stockPriceData.currentPrice : stock.currentPrice,\r\n                };\r\n            })\r\n        );\r\n        setStocks(updatedStockData);\r\n    };\r\n\r\n    // Fetch stock prices when stocks are first loaded\r\n    useEffect(() => {\r\n        updateStockPrices(stocks);\r\n    }, []);\r\n\r\n    // Add a new stock and fetch its price\r\n    const addStock = async (newStock) => {\r\n        const updatedStocks = [...stocks, newStock];\r\n        await updateStockPrices(updatedStocks);\r\n    };\r\n\r\n    // Delete a stock\r\n    const deleteStock = async (symbol) => {\r\n        const updatedStocks = stocks.filter((stock) => stock.symbol !== symbol);\r\n        await updateStockPrices(updatedStocks);\r\n    };\r\n\r\n    // Edit an existing stock and update its price\r\n    const editStock = async (updatedStock) => {\r\n        const updatedStocks = stocks.map((stock) =>\r\n            stock.symbol === updatedStock.symbol ? updatedStock : stock\r\n        );\r\n        await updateStockPrices(updatedStocks);\r\n    };\r\n\r\n    return (\r\n        <StocksContext.Provider value={{ stocks, addStock, deleteStock, editStock }}>\r\n            {children}\r\n        </StocksContext.Provider>\r\n    );\r\n}\r\n\r\nexport default StocksProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}